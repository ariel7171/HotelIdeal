
package hotelideal.Vistas;

import hotelideal.AccesoADatos.HabitacionData;
import hotelideal.AccesoADatos.ReservaData;
import hotelideal.AccesoADatos.TipoHabitacionData;
import hotelideal.Entidades.Habitacion;
import hotelideal.Entidades.Huesped;
import hotelideal.Entidades.Reserva;
import hotelideal.Entidades.TipoHabitacion;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.RoundRectangle2D;
import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;


public class FormularioReservaView extends javax.swing.JInternalFrame {

    private JDesktopPane desk;
    private HabitacionData hData;
    private TipoHabitacionData htData;
    private ReservaData rData;
    private List<Habitacion> habitaciones;
    private Habitacion habitacion;
    private DefaultTableModel modelo;
    private TipoHabitacion tipo;
    private LocalDate f1, f2, hoy;
    private int prsns, dias, num;
    private Huesped huesped;

    /**
     * Creates new form FormularioReservaView1
     */
    public FormularioReservaView() {
        
        try {
            this.hData = new HabitacionData();
            this.rData = new ReservaData();
        } catch (SQLException ex) {
            JOptionPane.showConfirmDialog(this, ex.getMessage(), "Error", JOptionPane.CLOSED_OPTION, JOptionPane.ERROR_MESSAGE);
        }
        
        setBorder(new EmptyBorder(3, 3, 3, 3));
        
        hoy = LocalDate.now();
        initComponents();
        
        jDateChooserFecha1.setIcon(new ImageIcon(getClass().getResource("/icon/Calendar_16.png")));
        jDateChooserFecha2.setIcon(new ImageIcon(getClass().getResource("/icon/Calendar_16.png")));
        setFrameIcon(new ImageIcon(getClass().getResource("/icon/hotel_21.png")));
        setearFormatos();
        desk = MenuView.getjDesktopPane1();

        jTableHabitaciones.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                // El evento se ejecuta cuando cambia la selección de fila
                if (!e.getValueIsAdjusting()) {
                    if (jTableHabitaciones.getSelectedRow() > -1) {
                        jButtonHuesped.setEnabled(true);
                        if(huesped!=null){
                            jButtonConfirmar.setEnabled(true);
                        }
                    } else {
                        jButtonHuesped.setEnabled(false);
                        if(huesped==null){
                            jButtonConfirmar.setEnabled(false);
                        }
                    }
                }
            }
        });
        mostrarInfoCampos();
        dibujaTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonConfirmar = new javax.swing.JButton();
        jDateChooserFecha1 = new com.toedter.calendar.JDateChooser();
        jDateChooserFecha2 = new com.toedter.calendar.JDateChooser();
        lblHasta = new javax.swing.JLabel();
        lblDesde = new javax.swing.JLabel();
        jButtonFiltrar = new javax.swing.JButton();
        jSpinnerCapita = new javax.swing.JSpinner();
        lblCapita = new javax.swing.JLabel();
        jButtonHuesped = new javax.swing.JButton();
        lblTitleRequerimientos = new javax.swing.JLabel();
        lblTitleHabitaciones = new javax.swing.JLabel();
        lblTitleNombre = new javax.swing.JLabel();
        lblCliente = new javax.swing.JLabel();
        jButtonCancelar = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableHabitaciones = new javax.swing.JTable();
        lblHuesped = new javax.swing.JLabel();

        setTitle("RESERVAS");

        jButtonConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Check_16.png"))); // NOI18N
        jButtonConfirmar.setText("Confirmar");
        jButtonConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarActionPerformed(evt);
            }
        });

        lblHasta.setText("HASTA");

        lblDesde.setText("DESDE");

        jButtonFiltrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Filter_16.png"))); // NOI18N
        jButtonFiltrar.setText("Filtrar");
        jButtonFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFiltrarActionPerformed(evt);
            }
        });

        lblCapita.setText("CAPITA");

        jButtonHuesped.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Determinar_16.png"))); // NOI18N
        jButtonHuesped.setText("Determinar");
        jButtonHuesped.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHuespedActionPerformed(evt);
            }
        });

        lblTitleRequerimientos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTitleRequerimientos.setText("REQUERIMIENTO HUESPED");

        lblTitleHabitaciones.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTitleHabitaciones.setText("HABITACIONES DISPONIBLES");

        lblTitleNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTitleNombre.setText("RESERVAR A NOMBRE DE:");

        lblCliente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCliente.setText("CLIENTE:");

        jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Cancel_File_16.png"))); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Exit_16.png"))); // NOI18N
        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jTableHabitaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "null", "N°", "Clase", "Cap-Personas", "Piso", "Prec-Noche", "Prec-Fin"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableHabitaciones.setToolTipText("");
        jTableHabitaciones.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableHabitaciones.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTableHabitaciones);
        if (jTableHabitaciones.getColumnModel().getColumnCount() > 0) {
            jTableHabitaciones.getColumnModel().getColumn(0).setMinWidth(0);
            jTableHabitaciones.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTableHabitaciones.getColumnModel().getColumn(0).setMaxWidth(0);
            jTableHabitaciones.getColumnModel().getColumn(1).setMinWidth(35);
            jTableHabitaciones.getColumnModel().getColumn(1).setPreferredWidth(35);
            jTableHabitaciones.getColumnModel().getColumn(1).setMaxWidth(35);
            jTableHabitaciones.getColumnModel().getColumn(3).setMinWidth(100);
            jTableHabitaciones.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTableHabitaciones.getColumnModel().getColumn(3).setMaxWidth(100);
            jTableHabitaciones.getColumnModel().getColumn(4).setMinWidth(40);
            jTableHabitaciones.getColumnModel().getColumn(4).setPreferredWidth(40);
            jTableHabitaciones.getColumnModel().getColumn(4).setMaxWidth(40);
            jTableHabitaciones.getColumnModel().getColumn(5).setMinWidth(80);
            jTableHabitaciones.getColumnModel().getColumn(5).setPreferredWidth(80);
            jTableHabitaciones.getColumnModel().getColumn(5).setMaxWidth(80);
            jTableHabitaciones.getColumnModel().getColumn(6).setMinWidth(80);
            jTableHabitaciones.getColumnModel().getColumn(6).setPreferredWidth(80);
            jTableHabitaciones.getColumnModel().getColumn(6).setMaxWidth(80);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDesde)
                            .addComponent(jDateChooserFecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHasta)
                            .addComponent(jDateChooserFecha2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSpinnerCapita, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(jButtonFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblCapita)))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblTitleHabitaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTitleNombre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonHuesped))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCliente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblHuesped, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblTitleRequerimientos))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(42, 42, 42))
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(jButtonConfirmar)
                .addGap(18, 18, 18)
                .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lblTitleRequerimientos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCapita)
                            .addComponent(lblDesde, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooserFecha1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jSpinnerCapita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonFiltrar))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblHasta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooserFecha2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(lblTitleHabitaciones)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitleNombre)
                    .addComponent(jButtonHuesped))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblHuesped, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConfirmar)
                    .addComponent(jButtonCancelar)
                    .addComponent(jButtonSalir))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFiltrarActionPerformed
        // TODO add your handling code here:
        filtrarTabla();
    }//GEN-LAST:event_jButtonFiltrarActionPerformed

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        // TODO add your handling code here:
        desk.removeAll();
        desk.repaint();
        dispose();
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonHuespedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHuespedActionPerformed
        // TODO add your handling code here:
        boolean recAvanzado=true;
        desk=MenuView.getjDesktopPane1();
        
        for (JInternalFrame frame : desk.getAllFrames()) {
            if(frame instanceof FormularioHuespedView){
                recAvanzado=false;
            }
        }
        
        if(recAvanzado){
            try {
                FormularioHuespedView frmHuesped = new FormularioHuespedView();
                centrarInternalFrame(frmHuesped);
                frmHuesped.setReserva(true);
                frmHuesped.setVisible(true);
                desk.add(frmHuesped);
                desk.moveToFront(frmHuesped);
                desk.setSelectedFrame(frmHuesped);
                frmHuesped.setfReserva(this);
            } catch (SQLException ex) {
                JOptionPane.showConfirmDialog(this, ex.getMessage(), "Error", JOptionPane.CLOSED_OPTION, JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonHuespedActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        setearFormatos();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarActionPerformed
        // TODO add your handling code here:
        int fila = jTableHabitaciones.getSelectedRow();
        habitacion = (Habitacion) jTableHabitaciones.getValueAt(fila, 0);
        int num = (int) jTableHabitaciones.getValueAt(fila, 1);
        LocalDate n = LocalDate.parse("0001-01-01");
        String precio = (String) jTableHabitaciones.getValueAt(fila, 6);
        precio = precio.replace("$", "");
        double prec = Double.parseDouble(precio);
        Object[] botones = {"Aceptar", "Cancelar"};
        if (0 == (javax.swing.JOptionPane.showOptionDialog(this, "Se reservará la habitacion N°" + num + " \nDesde: " + f1 + "\nHasta: " + f2 + "\nA solicitud de: " + huesped.toString() + "\nCon un precio final de: " + prec + "$", "", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE, null, botones, botones[0]))) {
            Object[] botones2 = {"Confirmar", "No Confrimar"};
            if (f1.compareTo(hoy) == 0 && 0 == (javax.swing.JOptionPane.showOptionDialog(this, "Desea confirmar el ingreso del huesped?", "", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE, null, botones, botones[0]))) {
                Reserva reserva = new Reserva(prsns, prec, true, true, habitacion, huesped, f1, f2, n);
                rData.guardar(reserva);
                filtrarTabla();
                jButtonConfirmar.setEnabled(false);
            } else {
                Reserva reserva = new Reserva(prsns, prec, true, false, habitacion, huesped, f1, f2, n);
                rData.guardar(reserva);
                filtrarTabla();
                jButtonConfirmar.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jButtonConfirmarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonConfirmar;
    private javax.swing.JButton jButtonFiltrar;
    private javax.swing.JButton jButtonHuesped;
    private javax.swing.JButton jButtonSalir;
    private com.toedter.calendar.JDateChooser jDateChooserFecha1;
    private com.toedter.calendar.JDateChooser jDateChooserFecha2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerCapita;
    private javax.swing.JTable jTableHabitaciones;
    private javax.swing.JLabel lblCapita;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblDesde;
    private javax.swing.JLabel lblHasta;
    private javax.swing.JLabel lblHuesped;
    private javax.swing.JLabel lblTitleHabitaciones;
    private javax.swing.JLabel lblTitleNombre;
    private javax.swing.JLabel lblTitleRequerimientos;
    // End of variables declaration//GEN-END:variables
public boolean controlarFecha() {
        if (jDateChooserFecha1.getDate() != null && jDateChooserFecha2.getDate() != null) {
            f1 = jDateChooserFecha1.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            f2 = jDateChooserFecha2.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            if (f2.compareTo(f1) < 0 || f2.compareTo(f1) == 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Alerta!\nEl campo \"Desde\", debe contener\nuna fecha previa a la del\ncampo \"Hasta\" ", "", javax.swing.JOptionPane.ERROR_MESSAGE);
                return false;
            } else if (f2.compareTo(hoy) < 0 || f1.compareTo(hoy) < 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Alerta!\nLas fechas ingresadas\nno pueden ser anteriores\na " + hoy, "", javax.swing.JOptionPane.ERROR_MESSAGE);
                return false;
            } else {
                return true;
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Alerta!\nDebe completar los campos\n\"Desde/Hasta\" para filtrar\nhabitaciones disponibles\ndurante aquel periodo", "", javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    public void setearFormatos() {
        SpinnerNumberModel numberModel = new SpinnerNumberModel(1, 1, 10, 1); // (valorInicial, valorMínimo, valorMáximo, paso)
        jSpinnerCapita.setModel(numberModel);
        modelo = (DefaultTableModel) jTableHabitaciones.getModel();
        modelo.setRowCount(0);
        jTableHabitaciones.setModel(modelo);
        lblHuesped.setText("");
        jDateChooserFecha1.setDateFormatString("dd MMMM yyyy");
        jDateChooserFecha2.setDateFormatString("dd MMMM yyyy");
        Date n = Date.valueOf(hoy);
        jDateChooserFecha1.setDate(n);
        jDateChooserFecha2.setDate(n);
        jButtonCancelar.setEnabled(false);
        jButtonConfirmar.setEnabled(false);
        jButtonHuesped.setEnabled(false);
    }

    public void filtrarTabla() {
        if (controlarFecha()) {
            modelo = (DefaultTableModel) jTableHabitaciones.getModel();
            modelo.setRowCount(0);
            prsns = (int) jSpinnerCapita.getValue();
            dias = (int) ChronoUnit.DAYS.between(f1, f2);
            habitaciones = hData.listarPorCapitaYfecha(prsns, f1, f2);

            if (habitaciones != null) {
                for (Habitacion hab : habitaciones) {
                    tipo = hab.getTipoHabitacion();
                    num = hab.getNroHabitacion();
                    double prec = tipo.getPrecioNoche();
                    modelo.addRow(new Object[]{hab, num, tipo.getDescripcion(), tipo.getCantPersonas(), hab.getPiso(), prec + "$", prec * dias + "$"});
                    jTableHabitaciones.setModel(modelo);
                }
            }
        }
        if (jTableHabitaciones.getRowCount() < 1) {
            jButtonHuesped.setEnabled(false);
        }
    }

    public void setHuesped(Huesped huesped) {
        if (huesped != null) {
            this.huesped = huesped;
            lblHuesped.setForeground(new Color(75, 110, 175));
            lblHuesped.setText("" + huesped.toString());
            jButtonConfirmar.setEnabled(true);
            jButtonCancelar.setEnabled(true);
        } else {
            this.huesped = huesped;
            lblHuesped.setText("");
            jButtonConfirmar.setEnabled(false);
            jButtonCancelar.setEnabled(false);
        }
    }
    private void centrarInternalFrame(JInternalFrame form) {

        Dimension desktopSize = desk.getSize();
        int x = (desktopSize.width - form.getWidth()) / 2;
        int y = (desktopSize.height - form.getHeight()) / 2;
        form.setLocation(x, y);
    }
    @Override
    protected void paintComponent(Graphics g) {

        int width = getWidth();
        int height = getHeight();
        int arc = 20; // Ajusta este valor para controlar el radio de las esquinas

        Graphics2D g2d = (Graphics2D) g.create();

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        g2d.setColor(getBackground());

        g2d.fill(new RoundRectangle2D.Float(0, 0, width, height, arc, arc));

        g2d.setColor(getBackground());
        g2d.draw(new RoundRectangle2D.Float(0, 0, width - 1, height - 1, arc, arc));

        g2d.dispose();
        super.paintComponent(g);
    }
    
    private void mostrarInfoCampos() {

        //lblTitle.putClientProperty( "FlatLaf.style", "font: bold $h1.font" );
        lblTitleHabitaciones.putClientProperty( "FlatLaf.style", "font: bold $h2.font" );
        lblTitleNombre.putClientProperty( "FlatLaf.style", "font: bold $h2.font" );
        lblTitleRequerimientos.putClientProperty( "FlatLaf.style", "font: bold $h2.font" );
        lblDesde.putClientProperty( "FlatLaf.style", "font: bold $h2.font" );
        lblHasta.putClientProperty( "FlatLaf.style", "font: bold $h2.font" );
        lblCapita.putClientProperty( "FlatLaf.style", "font: bold $h2.font" );
        lblCliente.putClientProperty( "FlatLaf.style", "font: bold $h2.font" );
        lblHuesped.putClientProperty( "FlatLaf.style", "font: bold $h2.font" );

    }
    
    public void dibujaTabla() {

        // Personalizar la alineación y la fuente de la cabecera
        JTableHeader tableHeader = jTableHabitaciones.getTableHeader();
        DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) tableHeader.getDefaultRenderer();

        // Cambiar la alineación de la cabecera (izquierda en este caso)
        headerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        // Cambiar la fuente de la cabecera
        jTableHabitaciones.getTableHeader().setFont(new Font("Arial", Font.BOLD, 12));

        // Crear renderizadores personalizados para diferentes alineaciones
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment(JLabel.LEFT);

        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);

        jTableHabitaciones.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);   
       
        jTableHabitaciones.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);  
        jTableHabitaciones.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        
        jTableHabitaciones.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
        jTableHabitaciones.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
    }
}
