/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelideal.Vistas;

import hotelideal.AccesoADatos.ReservaData;
import hotelideal.Entidades.Reserva;
import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Marcos
 */
public class ReservaAvanzado extends javax.swing.JInternalFrame {
private Reserva reserva;
private ReservaData rData;
private GestionReservas gestR;
private LocalDate fout,hoy,f1,f2;
    /**
     * Creates new form ReservaAvanzado
     */
    public ReservaAvanzado() {
    try {
        rData=new ReservaData();
    } catch (SQLException ex) {
        Logger.getLogger(ReservaAvanzado.class.getName()).log(Level.SEVERE, null, ex);
    }
        initComponents();
        hoy=LocalDate.now();
        jDateChooserF1.setDateFormatString("dd MMMM yyyy");
        jDateChooserF2.setDateFormatString("dd MMMM yyyy");
        jDateChooserFout.setDateFormatString("dd MMMM yyyy");
        jDateChooserFout.setDateFormatString("dd MMMM yyyy");
        habilitarCampos(false, false, false, false, false, false);
        habilitarBotones(true, true, false, false, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabelID = new javax.swing.JLabel();
        jCheckBoxActivo = new javax.swing.JCheckBox();
        jTextFieldMontoFin = new javax.swing.JTextField();
        jDateChooserF1 = new com.toedter.calendar.JDateChooser();
        jDateChooserF2 = new com.toedter.calendar.JDateChooser();
        jDateChooserFout = new com.toedter.calendar.JDateChooser();
        jButtonEditar = new javax.swing.JButton();
        jButtonGuardar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jButtonFinOcupaciones = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jCheckBoxConfirmado = new javax.swing.JCheckBox();
        jLabelHuesped = new javax.swing.JLabel();
        jLabelCapita = new javax.swing.JLabel();
        jLabelNroHabitacion = new javax.swing.JLabel();

        jLabel1.setText("ID de Resrva :");

        jLabel2.setText("Estado :");

        jLabel3.setText("Habitacion NÂ° :");

        jLabel4.setText("Huesped :");

        jLabel5.setText("Reservado desde :");

        jLabel6.setText("Reservado hasta :");

        jLabel7.setText("Ingreso del huesped :");

        jLabel8.setText("Egreso del huesped :");

        jLabel9.setText("Capita :");

        jLabel10.setText("Monto final :");

        jCheckBoxActivo.setText("Activo");

        jButtonEditar.setText("Editar");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonFinOcupaciones.setText("Finalizar ocupacion");
        jButtonFinOcupaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFinOcupacionesActionPerformed(evt);
            }
        });

        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jCheckBoxConfirmado.setText("Confirmado");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButtonFinOcupaciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel10)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addComponent(jLabel7)))
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooserF2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateChooserF1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateChooserFout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelHuesped, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonCancelar))
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jLabelID, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxConfirmado)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabelNroHabitacion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBoxActivo, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldMontoFin)
                                    .addComponent(jLabelCapita, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .addComponent(jLabelID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCheckBoxActivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelNroHabitacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelHuesped, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooserF1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooserF2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxConfirmado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooserFout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelCapita, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMontoFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancelar)
                    .addComponent(jButtonEliminar)
                    .addComponent(jButtonFinOcupaciones))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGuardar)
                    .addComponent(jButtonSalir)
                    .addComponent(jButtonEditar))
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
        // TODO add your handling code here:
        if(jCheckBoxConfirmado.isSelected()){
            javax.swing.JOptionPane.showMessageDialog(this, "El cliente ya ingresÃ³ a la habitacion.\nNo se puede editar la reserva.","", javax.swing.JOptionPane.WARNING_MESSAGE);
        }else{
            habilitarCampos(true, true, true, true, true, false);
            habilitarBotones(false, false, true, true, false);
        }        
    }//GEN-LAST:event_jButtonEditarActionPerformed

    private void jButtonFinOcupacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFinOcupacionesActionPerformed
        // TODO add your handling code here:
        if(jCheckBoxConfirmado.isSelected()){
            jCheckBoxActivo.setSelected(false);
            jDateChooserFout.setDate(Date.valueOf(hoy));
            habilitarCampos(false, false, true, false, false, false);
            habilitarBotones(false, false, true, true, false);
        }else{
            javax.swing.JOptionPane.showMessageDialog(this, "No se puede dar un fin a las ocupaciones si primero no se confirmaron.", "", 0);
        }
    }//GEN-LAST:event_jButtonFinOcupacionesActionPerformed

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        // TODO add your handling code here:
        if(jButtonGuardar.isEnabled()){
            Object[] botones={"Cancelar","Aceptar"};
            if(1==(javax.swing.JOptionPane.showOptionDialog(this, "Al salir, se perderan todos los datos no gurdados.\nDesea continuar?", "Alerta", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.ERROR_MESSAGE,null,botones,botones[0]))){
                dispose();
            } 
        }else{
            dispose();
        }
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        inicializarCampos();
        habilitarCampos(false, false, false, false, false, false);
        habilitarBotones(true, true, false, false, true);
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        // TODO add your handling code here:
        Object[] botones={"Cancelar","Guardar"};
        Object[] botones01={"Cancelar","Continuar"};
        f1=jDateChooserF1.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        f2=jDateChooserF2.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        if(jDateChooserFout.isEnabled()&&todosLosCamposHabilitados()==false){
            if(ningunCampoVacio()&&campoFoutNoVacio()){
                if(ControlarFcheck_out(true)){
                    if(1==(javax.swing.JOptionPane.showOptionDialog(this, "Se actualizaran los datos y no se\npodrÃ¡n revertir los cambios\nDesea guardar?","", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE,null,botones,botones[0]))){
                        capturarDatos(false);
                        if((fout.compareTo(reserva.getF_salida()))<=1){
                            int dias=(int) ChronoUnit.DAYS.between(fout, reserva.getF_salida());
                            dias=Math.abs(dias);
                            double precioNoche=reserva.getHabitacion().getTipoHabitacion().getPrecioNoche();
                            double monto1=reserva.getPrecio();
                            double monto2=monto1+(precioNoche*dias);
                            Object[] botones2={"No Actualizar","Actualizar"};
                            if(1==(javax.swing.JOptionPane.showOptionDialog(this, "El cliente se retirarÃ¡ antes de lo previsto.\nDesea actualizar el monto final?\n\nMonto Actual: "+reserva.getPrecio()+"$\nNuevo Monto: "+monto2+"$","", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE,null,botones,botones[0]))){
                                reserva.setPrecio(monto2);
                                rData.guardar(reserva);
                                gestR.cargarTabla();
                                dispose();
                            }else{
                                rData.guardar(reserva);
                                gestR.cargarTabla();
                                dispose();
                            }
                        }  
                    }
                }else{
                    javax.swing.JOptionPane.showMessageDialog(this, "El campo \"Egreso\" no puede estar vacio.", "", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }else{
                javax.swing.JOptionPane.showMessageDialog(this, "Se detectaron campos vacios!\nDebe completar todos los\ncampos para poder continuar.", "", javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        }else{
            if(ningunCampoVacio()){
                if(f1.compareTo(f2)<0&&f1.compareTo(hoy)>=0){
                    if(rData.comprobarFechaIngresoSalida(reserva.getHabitacion().getId_habitacion(), reserva.getIdReserva(), f1, f2)){
                        if(ControlarFcheck_out(false)){
                            int dias1=(int) ChronoUnit.DAYS.between(f1, f2);
                            double precioNoche=reserva.getHabitacion().getTipoHabitacion().getPrecioNoche();
                            dias1=Math.abs(dias1);
                            double monto1=precioNoche*dias1;
                            reserva.setPrecio(monto1);
                            capturarDatos(true);
                            if(jDateChooserFout.getDate()!=null){
                                capturarDatos(false);
                                if(ControlarFcheck_out(true)){
                                    int dias2=(int) ChronoUnit.DAYS.between(fout, f2);
                                    dias2=Math.abs(dias2);
                                    double monto2=monto1+(precioNoche*dias2);
                                    reserva.setPrecio(monto2);
                                    
                                    if(jCheckBoxActivo.isSelected()==false||jCheckBoxConfirmado.isSelected()){
                                        if(1==(javax.swing.JOptionPane.showOptionDialog(this, "Atencion!!\nSi el check \"Activo\" estÃ¡ vacÃ­o y/o \nSi el Egreso estÃ¡ confirmado, se darÃ¡ de baja la reserva.\nDesea continuar?","", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE,null,botones,botones[0]))){
                                            if(1==(javax.swing.JOptionPane.showOptionDialog(this, "Se actualizaran los datos y no se\npodrÃ¡n revertir los cambios\nDesea guardar?","", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE,null,botones,botones[0]))){
                                            rData.guardar(reserva);
                                            gestR.cargarTabla();
                                            dispose();
                                            }
                                        }
                                    }else{
                                        if(1==(javax.swing.JOptionPane.showOptionDialog(this, "Se actualizaran los datos y no se\npodrÃ¡n revertir los cambios\nDesea guardar?","", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE,null,botones,botones[0]))){
                                        rData.guardar(reserva);
                                        gestR.cargarTabla();
                                        dispose();
                                        }
                                    }
                                }
                            }else{
                                if(jCheckBoxActivo.isSelected()==false||jCheckBoxConfirmado.isSelected()){
                                    if(1==(javax.swing.JOptionPane.showOptionDialog(this, "Atencion!!\nSi el check \"Activo\" estÃ¡ vacÃ­o y/o \nSi el Egreso estÃ¡ confirmado, se darÃ¡ de baja la reserva.\nDesea continuar?","", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE,null,botones,botones[0]))){
                                        if(1==(javax.swing.JOptionPane.showOptionDialog(this, "Se actualizaran los datos y no se\npodrÃ¡n revertir los cambios\nDesea guardar?","", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE,null,botones,botones[0]))){
                                        rData.guardar(reserva);
                                        gestR.cargarTabla();
                                        dispose();
                                        }
                                    }
                                }else{
                                    if(1==(javax.swing.JOptionPane.showOptionDialog(this, "Se actualizaran los datos y no se\npodrÃ¡n revertir los cambios\nDesea guardar?","", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE,null,botones,botones[0]))){
                                    rData.guardar(reserva);
                                    gestR.cargarTabla();
                                    dispose();
                                    }
                                }
                            } 
                        }
                    }
                }else{
                    javax.swing.JOptionPane.showMessageDialog(this, "La fecha ingresada en el campo \"Desde\", no puede ser previa a la fecha actual\nTampoco es aceptable que la fecha del campo \"Hasta\", sea previa a la del campo\"Desde\" ", "", 0);
                }
            }
        }
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        // TODO add your handling code here:
        Object[] botones={"Cancelar","Continuar"};
        if(1==(javax.swing.JOptionPane.showOptionDialog(this, "Este procedimiento eliminarÃ¡ los\ndatos y ya no se podran recuperar.\nComprende este procedimiento y\ndesea continuar?", "Alerta", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.ERROR_MESSAGE,null,botones,botones[0]))){
            Object[] botones2={"Cancelar","Confirmar"};
            if(1==(javax.swing.JOptionPane.showOptionDialog(this, "Confirme proceso de eliminacion", "Confirmacion", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE,null,botones2,botones2[0]))){
                rData.eliminar(reserva.getIdReserva(), true);
                gestR.cargarTabla();
                dispose();
            }
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonFinOcupaciones;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JCheckBox jCheckBoxActivo;
    private javax.swing.JCheckBox jCheckBoxConfirmado;
    private com.toedter.calendar.JDateChooser jDateChooserF1;
    private com.toedter.calendar.JDateChooser jDateChooserF2;
    private com.toedter.calendar.JDateChooser jDateChooserFout;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelCapita;
    private javax.swing.JLabel jLabelHuesped;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JLabel jLabelNroHabitacion;
    private javax.swing.JTextField jTextFieldMontoFin;
    // End of variables declaration//GEN-END:variables

    public void setReserva(Reserva reserva) {
        this.reserva = reserva;
        inicializarCampos();
    }

    public void setGestR(GestionReservas gestR) {
        this.gestR = gestR;
    }
    
    
    public void inicializarCampos(){
        jLabelID.setText(""+reserva.getIdReserva());
        jLabelNroHabitacion.setText(""+reserva.getHabitacion().getNroHabitacion());
        jLabelHuesped.setText(reserva.getHuesped().toString());
        jLabelCapita.setText(""+reserva.getCant_personas());
        jDateChooserF1.setDate(Date.valueOf(reserva.getF_ingreso()));
        jDateChooserF2.setDate(Date.valueOf(reserva.getF_salida()));
        jCheckBoxActivo.setSelected(reserva.isEstado());
        jCheckBoxConfirmado.setSelected(reserva.isIngreso());
        jTextFieldMontoFin.setText(reserva.getPrecio()+" $");
        jDateChooserFout.setDate(null);
    }
    
    public void capturarDatos(boolean foutNull){
        
        boolean actv=jCheckBoxActivo.isSelected();
        boolean cnfrmd=jCheckBoxConfirmado.isSelected();
        String monto=jTextFieldMontoFin.getText();
        if(monto.contains("$")||monto.contains(",")){
            monto.replace("$", "");
            monto.replace(",", ".");
        }
        if(foutNull){
            fout=LocalDate.parse("0001-01-01");
            reserva.setSalida(fout);
        }else{
            reserva.setSalida(fout);
        }
        reserva.setF_ingreso(f1);
        reserva.setF_salida(f2);
        reserva.setEstado(actv);
        reserva.setIngreso(cnfrmd);
    }
    
    public void habilitarCampos(boolean f1, boolean f2, boolean fout, boolean activo, boolean confirmado, boolean monto){
        jDateChooserF1.setEnabled(f1);
        jDateChooserF2.setEnabled(f2);
        jDateChooserFout.setEnabled(fout);
        jCheckBoxActivo.setEnabled(activo);
        jCheckBoxConfirmado.setEnabled(confirmado);
        jTextFieldMontoFin.setEnabled(monto);
    }
    
    public void habilitarBotones(boolean editar, boolean finRes, boolean cancelar, boolean guardar, boolean eliminar){
        jButtonEditar.setEnabled(editar);
        jButtonFinOcupaciones.setEnabled(finRes);
        jButtonCancelar.setEnabled(cancelar);
        jButtonGuardar.setEnabled(guardar);
        jButtonEliminar.setEnabled(eliminar);
    }
    public boolean ControlarFcheck_out(boolean tru){
        if(jDateChooserFout.getDate()!=null){
            fout=jDateChooserFout.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            if((fout.compareTo(hoy))<0){
                javax.swing.JOptionPane.showMessageDialog(this, "La fecha ingresada en el campo \"Egreso\"\nno puede ser previa a la actual\n("+hoy+")", "", javax.swing.JOptionPane.ERROR_MESSAGE);
                return false;
            }else if((fout.compareTo(reserva.getF_salida()))>0){
                javax.swing.JOptionPane.showMessageDialog(this, "La fecha ingresada en el campo \"Egreso\"\nno puede ser posterior a "+reserva.getF_salida(), "", javax.swing.JOptionPane.ERROR_MESSAGE);
                return false;
            }else{
                if(1==(javax.swing.JOptionPane.showInternalConfirmDialog(this, "Al completar el campo \"Egreso\", ya no se podrÃ¡ editar la reserva,\nDesea continuar?"))){
                return false;
                }else{
                    return true;
                }
            }
        }else if(tru){
            javax.swing.JOptionPane.showMessageDialog(this, "El campo \"Egreso\" no puede estar vacio.", "", javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    public boolean todosLosCamposHabilitados(){
        return jDateChooserF1.isEnabled()&&jDateChooserF2.isEnabled()&&jDateChooserFout.isEnabled()&&jCheckBoxActivo.isEnabled()&&jCheckBoxConfirmado.isEnabled();
    }
    public boolean ningunCampoVacio(){
        
        return jDateChooserF1.getDate()!=null&&jDateChooserF2.getDate()!=null&&jTextFieldMontoFin.getText()!=null;
    }
    public boolean campoFoutNoVacio(){
        
        return jDateChooserFout.getDate()!=null;
    }
}
